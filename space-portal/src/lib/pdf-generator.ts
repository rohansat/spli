import jsPDF from 'jspdf';

export interface ApplicationData {
  [key: string]: string;
}

export function generateApplicationPDF(applicationData: ApplicationData, applicationName: string): jsPDF {
  const doc = new jsPDF();
  
  // Set font
  doc.setFont('helvetica');
  
  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Part 450 License Application', 20, 30);
  
  // Application name
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text(`Application: ${applicationName}`, 20, 45);
  
  // Date
  doc.setFontSize(12);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 55);
  
  // Line separator
  doc.setDrawColor(200, 200, 200);
  doc.line(20, 65, 190, 65);
  
  let yPosition = 80;
  const lineHeight = 7;
  const maxWidth = 170;
  
  // Process each field
  Object.entries(applicationData).forEach(([key, value]) => {
    if (value && value.trim() !== '') {
      // Field name
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      const fieldName = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
      doc.text(fieldName, 20, yPosition);
      
      yPosition += lineHeight;
      
      // Field value
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      
      // Handle long text by wrapping
      const lines = doc.splitTextToSize(value, maxWidth);
      
      if (yPosition + (lines.length * lineHeight) > 270) {
        // Add new page if content would overflow
        doc.addPage();
        yPosition = 20;
      }
      
      lines.forEach((line: string) => {
        doc.text(line, 25, yPosition);
        yPosition += lineHeight;
      });
      
      yPosition += 5; // Add some spacing between fields
    }
  });
  
  // Footer
  doc.setFontSize(10);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by SPLI Application System', 20, 280);
  
  return doc;
}

export function generatePDFBlob(applicationData: ApplicationData, applicationName: string): Blob {
  const doc = generateApplicationPDF(applicationData, applicationName);
  return doc.output('blob');
}

export function downloadPDF(applicationData: ApplicationData, applicationName: string, filename?: string): void {
  const doc = generateApplicationPDF(applicationData, applicationName);
  const fileName = filename || `${applicationName.replace(/\s+/g, '_')}_application.pdf`;
  doc.save(fileName);
} 